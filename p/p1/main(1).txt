#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>
#include <string>
#include <cmath>

std::string dec_to_binary(uint32_t x, int bits)
{
    std::string ret = "";
    for(int i = bits-1; i >= 0; --i)
    {
        if(i != 0 && i % 4 == 3)
        {
            ret += ' ';
        }
        ret += (char)(((x) >> i) & 1)+48;
    }
    return ret;
}

struct Block
{
    Block(bool free = true, std::string input = "00000000", uint64_t add = 0, uint32_t t = 0, uint32_t s = 0, uint32_t sh = 0)
    :available(free), hex(input), address(add), tag(t), set(s), shift(sh)
    {}

    inline bool operator==(Block a)
    {
        if (a.hex == hex &&
            a.address == address &&
            a.tag == tag &&
            a.set == set &&
            a.shift == shift)
        {
            return true;
        }
        else
            return false;
    }

    bool available;
    std::string hex;
    u_int64_t address;
    u_int32_t tag;
    u_int32_t set;
    u_int32_t shift;
};



class Cache
{
    // Number of blocks in main memory = (2^(s+w))/(2^w) = 2^s s = 9
    // Block size = line size (64 bytes) = 2^w words of bytes w = 6
    // Address length = (s + w)bits
    // Number of addressable units = 2^(s+w)words or bytes
    //  2^6 * 2^3 = 2^9 
    // Number of lines in set = k
    // Number of sets = v = 2^d
    // Number of lines in cache = m(512) = kv = k * 2^d
    // Size of cache = k * 2^(d+w)words or bytes
    // Size of tag = (s - d)bits

    // P.A. = bits

public:
    Cache(int bits_for_memory, int cache_size/*in bytes*/, int block_size/*in bytes*/, int k_associativity = 2, int victims_cache = 2)
     :misses_(0), memory_size_(bits_for_memory), cache_size_(cache_size), block_size_(block_size), k_way_set_association_(k_associativity), victims_cache_(victims_cache),
        pa_bits_(bits_for_memory), shift_bits_(std::log2(block_size)), 
        number_of_cache_lines_(cache_size/block_size)
    {
        set_bits_ = std::log2(number_of_cache_lines_/k_associativity);
        tag_bits_ = memory_size_ - (set_bits_ + shift_bits_);
        blocks_list_ = std::vector<std::vector<Block>>(std::pow(2,set_bits_), std::vector<Block> ((number_of_cache_lines_ / std::pow(2,set_bits_)), Block()));
        victims_list_ = std::vector<Block> (victims_cache_, Block());
    }

    inline
    void print_info()
    {
        std::cout << "Tag: " << tag_bits_ << " set: " << set_bits_ << " shift: " << shift_bits_ << "\nBlocks: " << number_of_cache_lines_ << std::endl;
    }

    void push_top_victum_list(Block x)
    {
       
    }

    void check_victum_cache(Block x)
    {
        for(int i = 0; i < victims_list_.size(); ++i)
        {
            if(x == victims_list_[i])
            {
                if(blocks_list_[x.set].size() < number_of_cache_lines_/std::pow(2, set_bits_))
                {
                    blocks_list_[x.set].push_back(x);
                    victims_list_.erase(victims_list_.begin()+i);
                }
                else
                {
                    blocks_list_[x.set].erase(blocks_list_[x.set].begin());
                    blocks_list_[x.set].push_back(x);
                    victims_list_.erase(victims_list_.begin()+i);
                }
            }
        }
    }

    void check_cache(Block x)
    {
        for(int i = 0; i < blocks_list_[x.set].size(); ++i)
        {
            if(x == blocks_list_[x.set][i])
            {
                blocks_list_[x.set].erase(blocks_list_[x.set].begin());
                blocks_list_[x.set].push_back(x);
            }
        }
        check_victum_cache(x);
        misses_++;
        if(blocks_list_[x.set].size() < number_of_cache_lines_/std::pow(2,set_bits_))
        {
            blocks_list_[x.set].push_back(x);
        }
        else
        {
            push_top_victum_list(blocks_list_[set][0]);
            blocks_list_[set].erase(blocks_list_[set].begin());
            blocks_list_[set].push_back(x);
        }
    }

    void print_cache()
    {
        std::cout << std::setfill('-') << std::setw(64) << ' ' << std::endl;
        for(int i = 0; i < (std::pow(2, set_bits_)); ++i)
        {   
            for(int j = 0; j < (number_of_cache_lines_/std::pow(2,set_bits_)); ++j)
            {
                std::cout << '|' << (blocks_list_[i][j].available ? '1' : '0')             << '|' 
                                 << dec_to_binary(blocks_list_[i][j].tag, tag_bits_)     << '|' 
                                 << dec_to_binary(blocks_list_[i][j].set, set_bits_)     << '|'
                                 << dec_to_binary(blocks_list_[i][j].shift, shift_bits_) << "|\n";
            }
            std::cout << std::setfill('-') << std::setw(64)  << "^" << i << std::endl;
        }
        std::cout << std::endl << std::setw(64) << std::left << "Victims_cache: " << std::endl;
        for(int i = 0; i < victims_cache_; ++i)
        {   
            std::cout << '|' << (victims_list_[i].available ? '1' : '0')           << '|' 
                             << dec_to_binary(victims_list_[i].tag, tag_bits_)     << '|' 
                             << dec_to_binary(victims_list_[i].set, set_bits_)     << '|'
                             << dec_to_binary(victims_list_[i].shift, shift_bits_) << "|\n";
    
        }
        std::cout << std::setfill('-') << std::setw(64) << ' ' << std::endl;
    }

// private:
    int misses_;
    int memory_size_; // in bits
    int cache_size_;  // in bytes
    int block_size_;  // in bytes
    int k_way_set_association_; // number of associations
    int victims_cache_; // number available

    int pa_bits_;
    int tag_bits_;
    int set_bits_;
    int shift_bits_;
    int number_of_cache_lines_;
    std::vector<std::vector<Block>> blocks_list_;
    std::vector<Block> victims_list_;
};



Block get_block(std::string temp, Cache cache)
{
    Block ret;
    temp.erase(0, 2);
    uint32_t temp_int = std::stoi(temp,nullptr,16);
    ret.available = false;
    ret.hex = temp;
    ret.address = temp_int;
    ret.tag  = temp_int >> (cache.set_bits_ + cache.shift_bits_);
    ret.set  = ((temp_int >> cache.shift_bits_) << (cache.tag_bits_ + cache.shift_bits_)) >> ((cache.tag_bits_ + cache.shift_bits_)) ; // wrong
    ret.shift = (temp_int << (cache.pa_bits_ - cache.shift_bits_)) >> (cache.pa_bits_ - cache.shift_bits_);
    
    return ret;
}

void print_bits(Block temp, Cache cache)
{
    std::cout << std::setw(0) << temp.hex      << std::setfill(' ') << std::setw(14) << std::left << ' ' << "    PA: " << dec_to_binary(temp.address, cache.pa_bits_) << std::endl;
    std::cout << std::setw(20) << std::left << ' ' << "   tag: " << dec_to_binary(temp.tag, cache.tag_bits_) << std::endl;
    std::cout << std::setw(20) << std::left << ' ' << "   set:  " << dec_to_binary(temp.set, cache.set_bits_) << std::endl;
    std::cout << std::setw(20) << std::left << ' ' << " shift:  " << dec_to_binary(temp.shift, cache.shift_bits_) << std::endl;
    std::cout << std::setw(64) << std::setfill('-') << " " << std::endl << std::endl;
}

int main ()
{
    Cache cache( 32, 512, 64);
    // Cache cache( 32, 8000, 16);
    cache.print_info();
    cache.print_cache();
    
    std::fstream fsread;
    fsread.open("data.txt");
    
    std::string temp = "";
    int skip = -1;
    int misses = 0;
    while(!fsread.eof())
    {
        bool found = false;
        std::getline(fsread, temp);
        Block temp_block = get_block(temp, cache);
        
        print_bits(temp_block, cache);
        
        cache.check_cache(temp_block);
        if(skip < 0)
        {
            std::getline(std::cin, temp);
            if(temp == "print_cache")
            {
                cache.print_cache();
            }
            else if(temp == "skip_")
            {
                std::cout << "how many lines do you want to skip: ";
                int amount = 0;
                std::cin >> skip;
            }
        }
        skip--;

        // for(int i = 0; i < cache.number_of_cache_lines_/std::pow(2, cache.set_bits_); ++i)
        // {
        //     // std::cout << "checking block_list set: " << temp_block.set << ' ' << i << std::endl;
        //     if(temp_block == cache.blocks_list_[temp_block.set][i])
        //     {
        //         found = true;
        //         // std::cout << "case 1 pushing to cache.set: " << temp_block.set << std::endl;
        //         cache.blocks_list_[temp_block.set][i].available = true;
        //         cache.push_top_block_list(temp_block, temp_block.set, 0);
        //         break;
        //     }
        // }
        // if(found)
        // {
        //     continue;
        // }
        // for(int i = 0; i < cache.victims_cache_; ++i)
        // {
        //     // std::cout << "checking victum_cache: " << i << std::endl;
        //     if(temp_block == cache.victims_list_[i])
        //     {
        //         cache.victims_list_[i].available = true;
        //         // std::cout << "case 2 pushing to cache.set: " << temp_block.set << std::endl;
        //         cache.push_top_block_list(temp_block, temp_block.set, 0);
        //         found = true;
        //     }
        // }
        // if(found)
        // {
        //     continue;
        // }
        // else
        // {
        //     misses++;
        //     std::cout << "cache miss total: " << misses << std::endl;
        //     // std::cout << "case 3 pushing to cache.set: " << temp_block.set << std::endl;
        //     cache.push_top_block_list(temp_block, temp_block.set, 0);
        // }
    }
    fsread.close();
    
    return 0;
}